# Typing Speed Test

# Import the Pygame library along with some Python built-in modules
import pygame
from pygame.locals import *
import sys
import time
import random


class TypeSpeed:  # Typing test class
    ''' The class will contain most function, responsible for
        executing the test, resetting the test, calculating the result...'''

    ''' The __init__() function to assign values to object properties,
        or other operations that are necessary to do when the
        object is being created'''
    def __init__(self):
        # Define variables
        self.w = 750  # Width of the program window
        self.h = 500  # Height of the program window

        self.reset = True  # Create a reset variable and set it to True
        self.active = False  # Create a activate variable and set it to False

        self.input = ''  # The user's input will be saved in this variable
        self.word = ''  # The randomly selected sentence will be returned here

        self.time_start = 0  # Setting the starting time to 0
        self.total_time = 0  # Setting the total time spent to 0
        self.accuracy = '0%'  # Setting the accuracy to 0%

        # The result will displayed in this format
        self.results = 'Time:0 Accuracy:0 % Wpm:0 '
        self.wpm = 0  # Setting the words per minute to 0

        # Create a end variable to end the typing test and set it to False
        self.end = False

        # RGB colour values for heading
        self.head_c = (33, 149, 243)
        # RGB colour values for the selected sentence
        self.text_c = (250, 250, 250)
        # RGB colour values for the result
        self.result_c = (255, 0, 70)

        pygame.init()

        # Read and display the loading image
        self.loading_img = pygame.image.load('loading.png')
        # Lock the image scale to fit the program window
        self.loading_img = pygame.transform.scale(
            self.loading_img, (self.w, self.h))

        # Read and display the background image
        self.bg = pygame.image.load('background.jpg')
        # Lock the image scale to fit the program window
        self.bg = pygame.transform.scale(self.bg, (self.w, self.h))

        # Render the program window
        self.screen = pygame.display.set_mode((self.w, self.h))
        pygame.display.set_caption('Type Speed test')  # Heading text

    ''' The draw_text function will draw the text on the screen. The argument
        it takes is the screen, the text, the y coordinate of the screen to
        position our text, the size of the font and the color of the font.
        The function will draw everything align to the center of the screen.'''
    def draw_text(self, screen, msg, y, fsize, color):
        # Set the font style and font size
        font = pygame.font.SysFont(None, fsize)
        text = font.render(msg, 1, color)  # Set the colour of the text message
        text_rect = text.get_rect(center=(self.w/2, y))  # Centre alignment
        screen.blit(text, text_rect)  # Drawing the text and the text frame
        pygame.display.update()  # Updating the sceen after drawing/rendering

    ''' The get_sentence function will open and read the dedicated .txt file
        and return a randomly selected sentence from the list.'''
    def get_sentence(self):
        read = open('sentences.txt').read()  # Reading the text file
        # Splitting the string with a newline character
        get_sentence = read.split('\n')
        sentence = random.choice(get_sentence)  # Randomly selecting a sentence
        return sentence  # Return the sentence to the self.word variable

    ''' The show_results() method is where we calculate the speed of the
        user’s typing. The time starts when the user clicks on the input box
        and when the user hits return key “Enter” then we perform the
        difference and calculate time in seconds.'''
    def show_results(self, screen):
        # Calculate accuracy
        # Resonsible for the timer and counting the correct input
        if not self.end:
            # Get total time spent by minusing starting time by ending time
            self.total_time = time.time() - self.time_start
            count = 0  # Counter for correct input characters
            # Checking for the user's input and increase the counter
            for i, c in enumerate(self.word):
                try:
                    # If the user's input equals to the displayed sentece
                    if self.input[i] == c:
                        count += 1  # Add 1 to the counter
                except:
                    pass

            # Calculate accuracy
            # (correct characters)/(total characters in sentence)x100
            self.accuracy = count/len(self.word)*100

            # Calculate words per minute:
            # (total number of character)x60/(total time)x5
            self.wpm = len(self.input)*60/(5*self.total_time)
            self.end = True
            print(self.total_time)

            # Round up the results to a whole number
            self.results = 'Time:'+str(round(self.total_time))
            + " secs   Accuracy:" + str(round(self.accuracy)) + "%"
            + '   Wpm: ' + str(round(self.wpm))

            # Read and display the resert button
            self.time_img = pygame.image.load('reset_button.png')
            # Locking the scale of the image to 150 x 150
            self.time_img = pygame.transform.scale(self.time_img, (150, 150))
            # Render the image and align to centre
            screen.blit(self.time_img, (self.w/2-75, self.h-140))

            print(self.results)  # Print the results
            pygame.display.update()  # Update the screen after rendering

    ''' The body of the class, it will handle all the events. The function will
        start by resetting all variables, then it will run an infinate loop
        that register all user's mouse and keyboard input.'''
    def run(self):
        # Everytime the test runs, it will automatically reset all variables
        self.reset_game()
        self.running = True  # Enable the infinate loop

        while(self.running):  # Run an infinite loop to chek every user input
            clock = pygame.time.Clock()  # Starts the timer
            # Draw the inner area for input box
            self.screen.fill((0, 0, 0), (50, 250, 650, 50))
            # Draw the outer highlight for input box
            pygame.draw.rect(self.screen, self.head_c, (50, 250, 650, 50), 2)

            # If loop that check if the test was paused or still running
            if self.active and not self.end:
                # Checks if the user's input matches with the sentence
                if not self.word.startswith(self.input):
                    # Draw the input text in red for incorrect input
                    self.draw_text(
                        self.screen, self.input, 274, 26, (250, 0, 0))
                else:
                    # Draw the input text in green for correct input
                    self.draw_text(
                        self.screen, self.input, 274, 26, (0, 250, 0))

            # Event handler that checks for user's mouse and keyboard input
            for event in pygame.event.get():
                # If the window close button was pressed
                if event.type == QUIT:
                    # Close the program
                    self.running = False
                    pygame.display.quit()
                    pygame.quit()
                    quit()

                # Check for mouse clicking
                elif event.type == pygame.MOUSEBUTTONUP:
                    # Save the coordinate of the mouse cursor
                    x, y = pygame.mouse.get_pos()

                    # Checks for mouse position
                    # Timer will only start when user click the input box
                    # Area of the input box
                    if(x >= 50 and x <= 650 and y >= 250 and y <= 300):
                        # Enable typing inside the input box
                        self.active = True
                        self.input = ''
                        self.time_start = time.time()  # Starts the timer

                    # Checks for mouse position and check if the test ended
                    # Area of reset box
                    if(x >= 310 and x <= 510 and y >= 390 and self.end):
                        self.reset_game()  # Reset every variables
                        # Save the coordinate of the mouse cursor
                        x, y = pygame.mouse.get_pos()

                # Check for keyboard input
                elif event.type == pygame.KEYDOWN:
                    # Check if the test was paused or still running
                    if self.active and not self.end:
                        # Check if the enter/return key was pressed
                        if event.key == pygame.K_RETURN:
                            print(self.input)  # For cheking in the Shell
                            # Draw the results
                            self.show_results(self.screen)
                            self.draw_text(
                                self.screen,
                                self.results,
                                350,
                                28,
                                self.result_c)
                            self.end = True

                        # Check if the backspace key was pressed
                        if event.key == pygame.K_BACKSPACE:
                            # Delete 1 character from the user input
                            self.input = self.input[:-1]
                        else:
                            try:
                                # Save user keyboard input in self.input
                                self.input += event.unicode
                            except:
                                pass

            pygame.display.update()  # Update the screen after rendering

        clock.tick(60)  # For every second, around 60 frames should pass

    ''' The reset_game function will reset all variables so that
        the typing test can start again.'''
    def reset_game(self):
        # Display the loading screen image
        self.screen.blit(self.loading_img, (0, 0))
        # Update the screen after drwawing/rendering
        pygame.display.update()
        # The loading screen will be shown for roughtly 1.5 seconds
        time.sleep(1.5)

        # Reset all variables
        self.reset = False
        self.end = False
        self.input = ''
        self.word = ''
        self.time_start = 0
        self.total_time = 0
        self.wpm = 0
        self.word = self.get_sentence()  # Run the get random sentence function

        if not self.word:  # Check if there's a selected sentence
            self.reset_game()  # If not, reset again

        self.screen.fill((0, 0, 0))  # Drawing heading
        self.screen.blit(self.bg, (0, 0))  # Display the background image
        msg = "Typing Speed Test"  # Heading text
        # Draw the Heading
        self.draw_text(self.screen, msg, 100, 80, self.head_c)
        # Draw the rectangle for input box
        pygame.draw.rect(self.screen, (255, 192, 25), (50, 250, 650, 50), 2)
        # Draw the sentence string
        self.draw_text(self.screen, self.word, 200, 28, self.text_c)

        pygame.display.update()  # Update the screen after drwawing/rendering

TypeSpeed().run()
