import pygame
from pygame.locals import *
import sys
import time
import random    
    
class TypeSpeed:
   
    def __init__(self):
        self.w= 750
        self.h= 500
        self.reset= True
        self.active = False
        self.input_text= ''
        self.word = ''
        self.time_start = 0
        self.total_time = 0
        self.accuracy = '0%'
        self.results = 'Time:0 Accuracy:0 % Wpm:0 '
        self.wpm = 0
        self.end = False
        self.HEAD_C = (255,213,102)
        self.TEXT_C = (240,240,240)
        self.RESULT_C = (255,70,70)
        pygame.init()
               
        # Read and display the loading image
        self.loading_img = pygame.image.load('type-speed-open.png')
        self.loading_img = pygame.transform.scale(self.loading_img, (self.w,self.h))


        #Read and display the background image
        self.bg = pygame.image.load('background.jpg')
        self.bg = pygame.transform.scale(self.bg, (self.w,self.h))

        self.screen = pygame.display.set_mode((self.w,self.h))
        pygame.display.set_caption('Type Speed test')
       
        
    def draw_text(self, screen, msg, y ,fsize, color):
        font = pygame.font.SysFont(None, fsize)
        text = font.render(msg, 1, color)
        text_rect = text.get_rect(center=(self.w/2, y))
        screen.blit(text, text_rect)
        pygame.display.update()   
        
    def get_sentence(self):
           read = open('sentences.txt').read()
           get_sentence = read.split('\n')
           sentence = random.choice(get_sentence)
           return sentence
    
    def show_results(self, screen):
        if(not self.end):
            self.total_time = time.time() - self.time_start #Calculate time ellapsed 
            count = 0 #Calculate accuracy
            for i,c in enumerate(self.word):
                try:
                    if self.input_text[i] == c:
                        count += 1
                except:
                    pass
            # Count is the number of correct typed characters 
            self.accuracy = count/len(self.word)*100 #Calculate accuracy using formula
           
            
            self.wpm = len(self.input_text)*60/(5*self.total_time) #Calculate words per minute
            self.end = True
            print(self.total_time)
                
            self.results = 'Time:'+str(round(self.total_time)) +" secs   Accuracy:"+ str(round(self.accuracy)) + "%" + '   Wpm: ' + str(round(self.wpm))

            #Read and display the resert icon png, which works as the reset button for the program
            self.time_img = pygame.image.load('icon.png')
            self.time_img = pygame.transform.scale(self.time_img, (150,150))
            screen.blit(self.time_img, (self.w/2-75,self.h-140))
            
            
            print(self.results)
            pygame.display.update()

    def run(self):
        self.reset_game() #Everytime the test runs, it should automatically reset all variables
        self.running = True
        
        while(self.running): #The test will run an infinite loop till the running is True
            clock = pygame.time.Clock()
            self.screen.fill((0,0,0), (50,250,650,50))
            pygame.draw.rect(self.screen,self.HEAD_C, (50,250,650,50), 2)

            c_count = 0

            for i,c in enumerate(self.word):
                try:
                    if self.input_text[i] == c:
                        c_count += 1
                    if c_count == self.input_text:       
                        self.draw_text(self.screen, self.input_text, 274, 26,(0,250,0))
                    else:
                        self.draw_text(self.screen, self.input_text, 274, 26,(250,0,0))
                except:
                    pass

                print(c_count)         
                
                
            for event in pygame.event.get():
                if event.type == QUIT:
                    self.running = False
                    pygame.display.quit()
                    pygame.quit()
                    quit()
                elif event.type == pygame.MOUSEBUTTONUP:
                    x,y = pygame.mouse.get_pos()

                    #The program checks for mouse position becuase the timer will only start when user click the input box
                    if(x>=50 and x<=650 and y>=250 and y<=300): #Position of input box
                        self.active = True
                        self.input_text = ''
                        self.time_start = time.time() 
                     
                    if(x>=310 and x<=510 and y>=390 and self.end): #Position of reset box
                        self.reset_game()
                        x,y = pygame.mouse.get_pos()
         
                        
                elif event.type == pygame.KEYDOWN: #Event handler for input
                    if self.active and not self.end:
                        if event.key == pygame.K_RETURN:
                            print(self.input_text)
                            self.show_results(self.screen)
                            self.draw_text(self.screen, self.results,350, 28, self.RESULT_C)  
                            self.end = True
                            
                        if event.key == pygame.K_BACKSPACE: #Event handler for backspace
                            self.input_text = self.input_text[:-1]
                        else:
                            try:
                                self.input_text += event.unicode
                            except:
                                pass
            
            pygame.display.update()
             
                
        clock.tick(60) #Clock timer

    def reset_game(self):
        self.screen.blit(self.loading_img, (0,0))
        pygame.display.update()
        time.sleep(1.5)
        
        self.reset= False
        self.end = False
        self.input_text=''
        self.word = ''
        self.time_start = 0
        self.total_time = 0
        self.wpm = 0

         
        self.word = self.get_sentence() # Get random sentence
        if (not self.word): self.reset_game()
        
        self.screen.fill((0,0,0)) #Drawing heading
        self.screen.blit(self.bg,(0,0))
        msg = "Typing Speed Test"
        self.draw_text(self.screen, msg, 80, 80,self.HEAD_C)  
        
        pygame.draw.rect(self.screen,(255,192,25), (50,250,650,50), 2) #Draw the rectangle for input box

        
        self.draw_text(self.screen, self.word, 200, 28,self.TEXT_C) #Draw the sentence string
        
        pygame.display.update()



TypeSpeed().run()

